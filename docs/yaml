openapi: 3.0.0
info:
  title: Employee & Department API
  version: 1.0.0

paths:
  /api/postDep:
    post:
      summary: Create a new Department
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentCreate'
      responses:
        "201":
          description: Department created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        "400":
          description: Invalid request
        "500":
          description: Failed to create department

  /api/postEmp:
    post:
      summary: Create a new Employee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeCreate'
      responses:
        "201":
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        "400":
          description: Invalid request
        "500":
          description: Failed to create employee

  /api/getEmp:
    get:   
      summary: Get all Employees (with filters)
      parameters:
        - in: query
          name: departmentId
          schema:
            type: integer
          required: false
          description: Filter employees by department ID
        - in: query
          name: minSalary
          schema:
            type: number
            format: decimal
          required: false
          description: Minimum salary filter
        - in: query
          name: maxSalary
          schema:
            type: number
            format: decimal
          required: false
          description: Maximum salary filter
        - in: query
          name: joinDate
          schema:
            type: string
            format: date-time
          required: false
          description: Filter employees by joining date
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search employees by name or email
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          required: false
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          required: false
          description: Number of records per page
      responses:
        "200":
          description: List of employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  total:
                    type: integer
                    example: 100
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
        "500":
          description: Failed to fetch employees

components:
  schemas:
    Department:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: IT

    DepartmentCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: IT

    Employee:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        salary:
          type: number
          format: decimal
          example: 50000.00
        joinDate:
          type: string
          format: date-time
          example: 2025-08-18T12:00:00Z
        departmentId:
          type: integer
          example: 1

    EmployeeCreate:
      type: object
      required:
        - firstName
        - lastName
        - email
        - salary
        - joinDate
        - departmentId
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        salary:
          type: number
          format: decimal
          example: 50000.00
        joinDate:
          type: string
          format: date-time
          example: 2025-08-18T12:00:00Z
        departmentId:
          type: integer
          example: 1
